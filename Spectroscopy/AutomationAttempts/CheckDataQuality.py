# -*- coding: utf-8 -*-
"""
Created on Thu Feb  1 14:13:37 2018

Checks if the line-integrated data looks good for use

@author: normandy
"""

import numpy as np
import matplotlib.pyplot as plt

import readline
readline
import MDSplus


# %%

plt.close('all')
plotting = False

# %% Check if a thing looks good

# Try all the shots in a given day
runday = 1120917
shots = [runday*1000 + i for i in range(0,40)]


shots = [1160429001,1160429004,1160429006,1160505001,1160505002,1160505003,1160505006,1160505011,1160505012,1160505013,1160505021,1160505023,1160511018,1160511019,1160511020,1160513005,1160513006,1160513007,1160513008,1160513009,1160513010,1160513012,1160513013,1160513014,1160513015,1160513016,1160513018,1160513020,1160513022,1160513025,1160513028,1160518002,1160518010,1160518011,1160518012,1160518023,1160525001,1160526022,1160527001,1160527002,1160527003,1160527005,1160527006,1160527007,1160527008,1160527015,1160607001,1160607001,1160607004,1160607004,1160607012,1160608002,1160608003,1160608006,1160608013,1160615006,1160615012,1160615013,1160615014,1160615024,1160621012,1160621013,1160621015,1160628009,1160628010,1160628011,1160628012,1160628013,1160630001,1160630004,1160630005,1160630006,1160630008,1160630013,1160630017,1160630020,1160630023,1160630024,1160630028,1160630029,1160630030,1160708006,1160708007,1160708008,1160708019,1160708020,1160708022,1160708023,1160708024,1160713006,1160713009,1160713016,1160713018,1160713019,1160714001,1160714010,1160714015,1160714020,1160714024,1160714029,1160714030,1160714031,1160715001,1160715002,1160715003,1160715004,1160715005,1160715007,1160715008,1160715010,1160715012,1160718002,1160718003,1160718007,1160718008,1160718009,1160718010,1160718011,1160718012,1160718013,1160718014,1160718018,1160718023,1160718024,1160718025,1160718027,1160721015,1160721016,1160721017,1160721018,1160721019,1160721021,1160721022,1160722006,1160725002,1160725003,1160725004,1160725005,1160725006,1160726017,1160727001,1160729002,1160729004,1160729005,1160729006,1160729007,1160729008,1160729009,1160729010,1160729011,1160729012,1160803022,1160803024,1160803025,1160803027,1160803029,1160803030,1160803033,1160803034,1160804002,1160804006,1160804007,1160804017,1160804018,1160805002,1160805004,1160805005,1160805010,1160805011,1160805012,1160805014,1160809002,1160809003,1160809008,1160809019,1160810006,1160810013,1160810017,1160811002,1160811003,1160811004,1160811005,1160811007,1160811009,1160811010,1160811015,1160811018,1160811020,1160811021,1160811022,1160811023,1160811024,1160811025,1160811027,1160811028,1160816004,1160816011,1160816016,1160816021,1160816022,1160816023,1160816024,1160818001,1160818007,1160818008,1160818009,1160818010,1160818011,1160818012,1160818013,1160818014,1160818015,1160818018,1160818023,1160818024,1160818027,1160818028,1160818029,1160823011,1160823012,1160823013,1160823014,1160823015,1160823016,1160823017,1160823018,1160823021,1160825002,1160825007,1160825013,1160825014,1160825015,1160825016,1160826003,1160826004,1160826005,1160826010,1160826026,1160826027,1160830003,1160901013,1160901014,1160901015,1160901016,1160901018,1160901019,1160901020,1160901022,1160901023,1160901024,1160902004,1160902005,1160902006,1160902008,1160902009,1160902010,1160902011,1160902014,1160902015,1160902016,1160902017,1160902018,1160908001,1160909002,1160909003,1160909004,1160909007,1160909010,1160913001,1160913002,1160913013,1160913013,1160914024,1160915019,1160916003,1160916004,1160919008,1160919009,1160920004,1160920005,1160920007,1160920008,1160920009,1160920011,1160920012,1160920017,1160920018,1160920026,1160920027,1160920028,1160920029,1160920030,1160921002,1160921003,1160921004,1160921006,1160921007,1160922010,1160922011,1160923001,1160923002,1160923018,1160923019,1160923020,1160928003,1160928004,1160928005,1160929023,1160929024,1160929025,1160930013,1160930014,1160930018,1160930019,1160930020,1160930021,1160930022,1160930029,1160930030,1160930031,1160930032,1160930033,1160930034]

num_shots = 0

for shot in shots:
    #print shot
    try:
        specTree = MDSplus.Tree('spectroscopy', shot)

        foundTht = -1

        for tht in range(9):
            ana = 'ANALYSIS'
            if tht > 0:
                ana += str(tht)

            try:
                comment = specTree.getNode(r'\SPECTROSCOPY::TOP.HIREXSR.'+ana+':COMMENT').data()
                if 'mdsplus' in comment:
                    continue
                elif 'root' in comment[0]:
                    continue
                else:
                    print comment[0]
                    foundTht = tht
                    num_shots += 1

                    if plotting:
                        f, (ax1, ax2) = plt.subplots(2, 1, sharex=True)

                        momentsNode = specTree.getNode(r'\SPECTROSCOPY::TOP.HIREXSR.ANALYSIS.HELIKE.MOMENTS.Z')
                        mom = momentsNode.getNode('mom').data()
                        pos = momentsNode.getNode('pos').data()
                        err = momentsNode.getNode('err').data()

                        tgood = np.sum(mom[0,:,0] > 0)
                        chgood = np.sum(mom[0,0,:] > 0)

                        m0 = mom[0,int(tgood/2)+1,:chgood]
                        m0_err = mom[0,int(tgood/2)+1,:chgood]
                        m2 = mom[2,int(tgood/2)+1,:chgood]
                        m2_err = mom[2,int(tgood/2)+1,:chgood]
                        rho = pos[:chgood,3]

                        ax2.errorbar(rho[rho>=0], m2[rho>=0]/m0[rho>=0]*1e6, fmt='^', c='r')
                        ax2.errorbar(np.abs(rho[rho<0]), m2[rho<0]/m0[rho<0]*1e6, fmt='v', c='b')
                        ax2.set_ylim([0, 2])

                        ax1.errorbar(rho[rho>=0], m0[rho>=0], fmt='^', c='r')
                        ax1.errorbar(np.abs(rho[rho<0]), m0[rho<0], fmt='v', c='b')

                        ax1.set_title(str(shot))

                        plt.show()

                    break
            except:
                continue

        if foundTht >= 0:
            print shot, '@ THT='+str(foundTht)
    except:
        pass

print num_shots, 'total run'
